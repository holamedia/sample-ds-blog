{
  
    
        "post0": {
            "title": "",
            "content": ". Visualization functions . def chart_countries_timeline(_df, countries, since_date=&#39;1/23/2020&#39;): _df = _df[_df[&#39;Country&#39;].isin(countries)] _df = _df[_df[&#39;Date&#39;].ge(since_date)] selection = alt.selection_multi(fields=[&#39;Country&#39;], bind=&#39;legend&#39;) chart = alt.Chart(_df).mark_line().encode( x=&#39;Date:T&#39;, y=&#39;Cases:Q&#39;, #y=alt.Y(&#39;Cases:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), color=&#39;Country&#39;, tooltip=list(_df), opacity=alt.condition(selection,alt.value(1), alt.value(0.2)) ).properties(width=1000).add_selection(selection) return chart def chart_countries_timeline_diff(df, country): _df = df[df[&#39;Country&#39;] == country] _df = _df[[&#39;Date&#39;, &#39;Cases&#39;]].set_index(&#39;Date&#39;) source = _df.diff().reset_index() chart = alt.Chart(source).mark_bar().encode( x=&#39;Date:T&#39;, y=&#39;Cases:Q&#39; #y=alt.Y(&#39;Cases:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)) ) return chart def chart_countries_cases(df, n, date_as_of=date_latest): bars = alt.Chart(countries_cases(df, n, date_as_of)).mark_bar().encode( x=alt.X(&#39;Country:O&#39;, sort=&#39;-y&#39;), y=&#39;Cases:Q&#39; ) text = bars.mark_text( align=&#39;center&#39;, baseline=&#39;bottom&#39; ).encode( text=&#39;Cases:Q&#39; ) return (bars + text).properties(width=500) s_date_latest = date_latest.strftime(&#39;%m/%d/%Y&#39;) n_confirmed = df_global.loc[1][&#39;Confirmed&#39;] n_deaths = df_global.loc[1][&#39;Deaths&#39;] n_recovered = df_global.loc[1][&#39;Recovered&#39;] df_global_diff = df_global.diff() n_confirmed_diff = df_global_diff.loc[1][&#39;Confirmed&#39;] n_deaths_diff = df_global_diff.loc[1][&#39;Deaths&#39;] n_recovered_diff = df_global_diff.loc[1][&#39;Recovered&#39;] weekDays = (&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Saturday&quot;,&quot;Sunday&quot;) . Global . print( f&#39;According to the official count, the coronavirus pandemic has sickened more than n t{n_confirmed:,} (+{n_confirmed_diff:,.0f}) people. n&#39; f&#39;As of {weekDays[date_latest.weekday()]} evening, at least&#39; f&#39; n t{n_recovered:,} (+{n_recovered_diff:,.0f}) or {n_recovered/n_confirmed*100:.2f}% people have recovered and&#39; f&#39; n t{n_deaths:,} (+{n_deaths_diff:,.0f}) or {n_deaths/n_confirmed*100:.2f}% people have died. &#39; #f&#39;and the virus has been detected in at least 171 countries, as these maps show.&#39; ) print(&#39; n n&#39;) df_summary90 = df_summary(90).groupby(&#39;Date&#39;).sum().diff().reset_index() df_summary90[&#39;Closed&#39;] = df_summary90[&#39;Deaths&#39;] + df_summary90[&#39;Recovered&#39;] _base = alt.Chart(df_summary90).encode(x=&#39;Date:T&#39;) _confirmed = _base.mark_bar( color=&#39;red&#39; ).encode( y=alt.Y(&#39;Confirmed:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), ) _closed = _base.mark_bar( color=&#39;green&#39; ).encode( y=alt.Y(&#39;Closed:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), ) (_confirmed + _closed).properties( title = &#39;Global Daily New Confirmed and Closed Cases&#39;, width = 1000 ) . According to the official count, the coronavirus pandemic has sickened more than 1,095,917 (+82,760) people. As of Friday evening, at least 225,796 (+15,533) or 20.60% people have recovered and 58,787 (+5,804) or 5.36% people have died. . Overview . chart_confirmed_2000 = chart_countries_cases(df_confirmed, 2000).properties(title = &#39;Countries with over 2000 confirmed cases&#39;, width = 1500) . chart_deaths_500 = chart_countries_cases(df_deaths, 500).properties(title = &#39;Countries with over 500 deaths cases&#39;) df_deaths_500 = chart_deaths_500.data.sort_values(&#39;Cases&#39;, ascending=False)[[&#39;Country&#39;, &#39;Cases&#39;]].reset_index(drop=True) print(df_deaths_500) print(&#39; n&#39;) chart_deaths_500 . Country Cases 0 Italy 14681 1 Spain 11198 2 US 7087 3 France 6520 4 United Kingdom 3611 5 China 3326 6 Iran 3294 7 Netherlands 1490 8 Germany 1275 9 Belgium 1143 10 Switzerland 591 . countries_5000 = countries_cases(df_confirmed, 5000)[&#39;Country&#39;].unique() chart_countries_timeline(df_confirmed, countries_5000).properties(title=f&#39;Confirmed Cases around the world (&gt;5000 cases)&#39;) . chart_countries_timeline(df_deaths, countries_5000).properties(title=f&#39;Deaths Cases around the world (with &gt;5000 confirmed cases)&#39;) . United States . df_US = df_summary(60).loc[&#39;US&#39;] df_US . Confirmed Deaths Recovered . Date . 2020-02-04 11 | 0 | 0 | . 2020-02-05 11 | 0 | 0 | . 2020-02-06 11 | 0 | 0 | . 2020-02-07 11 | 0 | 0 | . 2020-02-08 11 | 0 | 0 | . 2020-02-09 11 | 0 | 3 | . 2020-02-10 11 | 0 | 3 | . 2020-02-11 12 | 0 | 3 | . 2020-02-12 12 | 0 | 3 | . 2020-02-13 13 | 0 | 3 | . 2020-02-14 13 | 0 | 3 | . 2020-02-15 13 | 0 | 3 | . 2020-02-16 13 | 0 | 3 | . 2020-02-17 13 | 0 | 3 | . 2020-02-18 13 | 0 | 3 | . 2020-02-19 13 | 0 | 3 | . 2020-02-20 13 | 0 | 3 | . 2020-02-21 15 | 0 | 5 | . 2020-02-22 15 | 0 | 5 | . 2020-02-23 15 | 0 | 5 | . 2020-02-24 51 | 0 | 5 | . 2020-02-25 51 | 0 | 6 | . 2020-02-26 57 | 0 | 6 | . 2020-02-27 58 | 0 | 6 | . 2020-02-28 60 | 0 | 7 | . 2020-02-29 68 | 1 | 7 | . 2020-03-01 74 | 1 | 7 | . 2020-03-02 98 | 6 | 7 | . 2020-03-03 118 | 7 | 7 | . 2020-03-04 149 | 11 | 7 | . 2020-03-05 217 | 12 | 7 | . 2020-03-06 262 | 14 | 7 | . 2020-03-07 402 | 17 | 7 | . 2020-03-08 518 | 21 | 7 | . 2020-03-09 583 | 22 | 7 | . 2020-03-10 959 | 28 | 8 | . 2020-03-11 1281 | 36 | 8 | . 2020-03-12 1663 | 40 | 12 | . 2020-03-13 2179 | 47 | 12 | . 2020-03-14 2727 | 54 | 12 | . 2020-03-15 3499 | 63 | 12 | . 2020-03-16 4632 | 85 | 17 | . 2020-03-17 6421 | 108 | 17 | . 2020-03-18 7783 | 118 | 105 | . 2020-03-19 13677 | 200 | 121 | . 2020-03-20 19100 | 244 | 147 | . 2020-03-21 25489 | 307 | 176 | . 2020-03-22 33276 | 417 | 178 | . 2020-03-23 43847 | 557 | 178 | . 2020-03-24 53740 | 706 | 348 | . 2020-03-25 65778 | 942 | 361 | . 2020-03-26 83836 | 1209 | 681 | . 2020-03-27 101657 | 1581 | 869 | . 2020-03-28 121478 | 2026 | 1072 | . 2020-03-29 140886 | 2467 | 2665 | . 2020-03-30 161807 | 2978 | 5644 | . 2020-03-31 188172 | 3873 | 7024 | . 2020-04-01 213372 | 4757 | 8474 | . 2020-04-02 243453 | 5926 | 9001 | . 2020-04-03 275586 | 7087 | 9707 | . _chart = chart_countries_timeline(df_confirmed, [&#39;US&#39;]).properties(title = &#39;Confirmed cases in United States&#39;) _diff = chart_countries_timeline_diff(df_confirmed, &#39;US&#39;) (_chart + _diff) . Japan . _chart = chart_countries_timeline(df_confirmed, [&#39;Japan&#39;]).properties(title = &#39;Confirmed cases in Japan&#39;) _diff = chart_countries_timeline_diff(df_confirmed, &#39;Japan&#39;) (_chart + _diff) . _chart = chart_countries_timeline(df_confirmed, [&#39;Korea, South&#39;]).properties(title = &#39;Confirmed cases in South Korea&#39;) _diff = chart_countries_timeline_diff(df_confirmed, &#39;Korea, South&#39;) (_chart + _diff) . South East Asia . sea_countries = [&#39;Malaysia&#39;, &#39;Indonesia&#39;, &#39;Singapore&#39;, &#39;Thailand&#39;, &#39;Vietnam&#39;, &#39;Cambodia&#39;, &#39;Brunei&#39;, &#39;Burma&#39;, &#39;Philippines&#39;, &#39;Laos&#39;] df_rate = lambda df: df[df[&#39;Date&#39;] == date_latest].set_index(&#39;Country&#39;)[&#39;Cases&#39;] df_confirmed_sea = df_confirmed[df_confirmed[&#39;Country&#39;].isin(sea_countries)] chart_countries_cases(df_confirmed_sea, 0).properties(title = &#39;Confirmed Cases in South East Asia&#39;) . df_deaths_sea = df_deaths[df_deaths[&#39;Country&#39;].isin(sea_countries)] print((df_rate(df_deaths_sea)/df_rate(df_confirmed_sea)*100.0).to_frame().rename(columns={&#39;Cases&#39;: &#39;Death_Rate&#39;}).sort_values(by=&#39;Death_Rate&#39;, ascending=False)) chart_countries_cases(df_deaths_sea, 0).properties(title = &#39;Death Cases in South East Asia&#39;) . Death_Rate Country Indonesia 9.113797 Burma 5.000000 Philippines 4.506296 Malaysia 1.590159 Thailand 0.960566 Brunei 0.746269 Singapore 0.448833 Cambodia 0.000000 Laos 0.000000 Vietnam 0.000000 . df_recoverd_sea = df_recovered[df_recovered[&#39;Country&#39;].isin(sea_countries)] print((df_rate(df_recoverd_sea)/df_rate(df_confirmed_sea)*100.0).to_frame().rename(columns={&#39;Cases&#39;: &#39;Recovered_Rate&#39;}).sort_values(by=&#39;Recovered_Rate&#39;, ascending=False)) chart_countries_cases(df_recoverd_sea, 0).properties(title = &#39;Recovered Cases in South East Asia&#39;) . Recovered_Rate Country Brunei 48.507463 Vietnam 35.864979 Thailand 30.940344 Cambodia 30.701754 Singapore 25.314183 Malaysia 24.812481 Indonesia 6.747231 Philippines 1.722995 Burma 0.000000 Laos 0.000000 . chart_countries_timeline(df_confirmed, sea_countries, &#39;3/1/2020&#39;).properties(title=f&#39;Confirmed Cases in South East Asia as of {date_latest}&#39;) . chart_countries_timeline(df_deaths, sea_countries, &#39;3/1/2020&#39;).properties(title=&#39;Deaths Cases in South East Asia&#39;) . Malaysia . _chart = chart_countries_timeline(df_confirmed, [&#39;Malaysia&#39;]).properties(title = &#39;Confirmed cases in Malaysia&#39;) _diff = chart_countries_timeline_diff(df_confirmed, &#39;Malaysia&#39;) df_confirmed_my = _chart.data df_confirmed_my_new = _diff.data alt.Chart(df_confirmed_my[df_confirmed_my[&#39;Cases&#39;] &gt; 100]).mark_line().encode( x=&#39;Date:T&#39;, y=alt.Y(&#39;Cases:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)) ).properties( title = &#39;Confirmed Cases in Malaysia (&gt; 100)&#39;) . #_chart = chart_countries_timeline(df_recovered, [&#39;Malaysia&#39;]).properties(title = &#39;Recovered cases in Malaysia&#39;) _diff = chart_countries_timeline_diff(df_recovered, &#39;Malaysia&#39;) #df_recovered_my = _chart.data df_recovered_my_new = _diff.data pd.merge(df_recovered_my_new, df_confirmed_my_new, on=&#39;Date&#39;).rename(columns={&#39;Cases_x&#39;: &#39;Recovered&#39;, &#39;Cases_y&#39;: &#39;Confirmed&#39;}) dff1 = df_confirmed.rename(columns={&#39;Cases&#39;: &#39;Confirmed&#39;}) dff1[&#39;Closed&#39;] = (df_recovered[&#39;Cases&#39;] + df_deaths[&#39;Cases&#39;]).to_frame() dff1_my = dff1[dff1[&#39;Country&#39;] == &#39;Malaysia&#39;] dff1_my = dff1_my[[&#39;Date&#39;, &#39;Confirmed&#39;, &#39;Closed&#39;]].set_index(&#39;Date&#39;).reset_index() _base = alt.Chart(dff1_my).encode(x=&#39;Date:T&#39;) _confirmed = _base.mark_line(color=&#39;red&#39;).encode(y=&#39;Confirmed:Q&#39;) _closed = _base.mark_line(color=&#39;green&#39;).encode(y=&#39;Closed:Q&#39;) (_confirmed + _closed).properties(title=&#39;Confirmed and Closed (Recovered or Deaths) case in Malaysia&#39;, width = 1000) . _chart = chart_countries_timeline(df_deaths, [&#39;Malaysia&#39;]).properties(title = &#39;Deaths cases in Malaysia&#39;) _diff = chart_countries_timeline_diff(df_deaths, &#39;Malaysia&#39;) (_chart + _diff) .",
            "url": "https://holamedia.github.io/sample-ds-blog/2020/04/04/2020-04-04-COVID-19.html",
            "relUrl": "/2020/04/04/2020-04-04-COVID-19.html",
            "date": " • Apr 4, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://holamedia.github.io/sample-ds-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://holamedia.github.io/sample-ds-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://holamedia.github.io/sample-ds-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}